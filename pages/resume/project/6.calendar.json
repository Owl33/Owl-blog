{
  "title": "게임 캘린더 (가제)",
  "date": "2025.10 ~ 2025-10",
  "url": "https://game-calendar-two.vercel.app/",
  "subtitle": "출시 예정인 게임들을 캘린더 형식으로 직관적으로 보기 쉽게 모아보고, 현재까지 출시된 게임을 모아보기 위해 제작된 캘린더 페이지",
  "task": "NextJs를 사용한 프론트엔드 구축, NestJs로 백엔드 구축, Supabase의 postgreSQl 사용",
  "skill": "NextJs, NestJs, react-query",
  "details": [
    "아직 출시 하지는 않았으며, 최종적으로 프론트엔드 최종 마무리를 한 뒤 이름을 정하고 출시를 할 예정",
    "프론트엔드를 주로 했기 때문에 백엔드는 AI의 도움을 많이 받아 코딩함. CODEX와 CLAUDE 두가지를 모두 사용",
    "해당 프로젝트는 데이터 수집이 중요한 프로젝트였고, PC게임은 Steam API로 그 외 콘솔 게임은 RAWG API를 데이터를 사용해 수집하기로 결정함.",
    "Steam에서 제공하는 게임의 숫자만 약 30만개 가량의 데이터가 있었고, RAWG의 데이터까지 합쳐진다면 정말 많은 데이터가 있을것으로 예상되어 비용 문제로 모든 데이터를 저장 하는 것은 비용 적으로 어려움이 따랐음. 내부적으로 계산한 인기도로 어느정도 인지도가 있는 게임만 저장하는 룰을 정함.",
    "Steam API의 특성상 모든 데이터를 저장 해놔야 했기에 games, game details, game release 테이블로 나눠 games에는 모든 게임을 얕게 저장하고, details와 release 테이블은 내부적으로 계산한 인기도 40점 이상인 게임만 저장하기로 결정",
    "출처가 두곳인 게임을 하나로 가공하여 저장해야 했기에 RAWG과 STEAM의 API를 호출하는 컨트롤러는 수집과 가공만을 담당하며, 최종적으로 상위의 파이프라인이 내부 DB와 통신 하도록 담당, 같은 게임임을 판단 할 수 있는 데이터가 name밖에 없었기 대문에 name을 slug화 하여 점수제로 같은 게임임을 판별",
    "데이터 정확성은 Steam이 높기에 games와 game details는 Steam의 데이터를 우선하고, 1:1의 관계, release는 pc와 콘솔의 모두의 릴리즈 데이터를 저장해야 되므로 games와 1:n의 관계를 가지기로 결정",
    "프론트엔드에서는 react-query를 사용하여 데이터 캐시로 효율적인 데이터 관리 목표",
    "전체 게임을 보여주는 페이지는 react-virtual을 이용한 가상 스크롤로 무한 스크롤 페이지를 DOM 최적화",
    "추후 데이터의 최적화 및 효율 관리를 위해 프론트엔드에서 데이터를 영속적으로 캐시하여 초기화 되지 않게 하고, websocket을 연결하여 데이터가 업데이트 되거나 생성이 되었을 경우 해당 데이터가 포함되는 범위를 다시 불러올수 있게 알려주는 흐름은 어떨지 생각하고 있음."
  ],
  "more": [
    {
      "type": "image",
      "src": "/images/portfolio/calendar.png",
      "source": "",
      "subtitle": "캘린더 페이지"
    },
    {
      "type": "image",
      "src": "/images/portfolio/allgames.png",
      "source": "",

      "subtitle": "전체 게임 페이지"
    },
    {
      "type": "image",
      "src": "/images/portfolio/details.png",
      "source": "",
      "subtitle": "게임 상세 페이지"
    },
    {
      "type": "image",
      "src": "/images/portfolio/ERD.png",
      "source": "",

      "subtitle": "엔티티 관계도"
    }
  ]
}
